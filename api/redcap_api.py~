import requests
import os
import yaml
import enum
from datetime import datetime


class PostAPI:
    """decorator class for wrapping and making api calls to REDCap"""
    def __init__(self, func):
        self.func = func
        self.token = None
        self.post_format = 'json'
        self.return_format = 'json'
        self.url = None
        self._get_config_info()

    def __call__(self, *args, **kwargs):
        """the redcap api is... interesting. The documentation states that records, fields, forms, and events
            are optional and by default, all data is pulled for the corresponding parameter (e.g. all records).
            However, the passing of a blank value results in a blank list or an error 400. So to get all the
            data for a given parameter, it must be omitted from the call.

            So to deal with this behavior, key:values will be parsed and if a '-1' is encountered on those keys, then
            the entire key is ommitted from the data dict."""

        # get specific post parameters being sought
        api_post_parameters = self.func(*args, **kwargs)

        # set default post parameters
        default_parameters = {
            'type': 'flat',
            'records': '-1',
            'fields': '-1',
            'forms': '-1',
            'events': '-1',
            'rawOrLabel': 'raw',
            'rawOrLabelHeaders': 'raw',
            'exportCheckboxLabel': 'false',
            'exportSurveyFields': 'false',
            'exportDataAccessGroups': 'false',
            'filterLogic': '',
            'dateRangeBegin': '',
            'dateRangeEnd': '',
            'csvDelimiter': ',',
            'decimalCharacter': '.'
        }

        # get the difference between what is defaulted and what was passed in
        add_these_default_keys = set(default_parameters.keys()) - set(kwargs.keys())

        # add default key:value pairs to api_post_parameters
        for key in add_these_default_keys:
            if key in ['records', 'fields', 'forms', 'events']:
                continue
            else:
                api_post_parameters[key] = default_parameters[key]

        # make request
        request = requests.post(self.url, data=api_post_parameters)

        # check response code, throw error if necessary
        self._parse_api_response(request)

        # return dict
        return request.json()

    def _get_config_info(self) -> None:
        config_file = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'config.yaml')
        with open(config_file, 'r') as f:
            config_data = yaml.load(f, Loader=yaml.FullLoader)
        self.token = config_data['api']['token']
        self.url = config_data['api']['url']

    def _log_api_response(self):
        # todo: create log?
        pass

    @staticmethod
    def _parse_api_response(request):
        if request.status_code == 200:
            pass
        elif request.status_code == 400:
            # todo: build logger
            ValueError(f"{request.status_code}: {request.reason}")
        elif request.status_code == 401:
            ValueError(f"Error {request.status_code}: API token is missing or incorrect.")
        elif request.status_code == 403:
            PermissionError(f"Error {request.status_code}: You do not have permissions to use the API.")
        elif request.status_code == 404:
            ValueError(f"Error {request.status_code}: The URI you requested is invalid or the resource does not exist.")
        elif request.status_code == 406:
            ValueError(f"Error {request.status_code}: The data being imported was formatted incorrectly.")
        elif request.status_code == 500:
            ConnectionError(f"Error {request.status_code}: The server encountered an error processing your request.")
        elif request.status_code == 501:
            ValueError(f"Error {request.status_code}: The requested method is not implemented.")


# used to get data from REDCap API
# For 'dateRangeBegin' and 'dateRangeEnd', the format is YYYY-MM-DD HH:MM:SS
def export_arms(*arms: str, return_format: str = 'json'):
    post = {
        'content': 'arm',
        'returnFormat': 'json'
    }
    if len(arms) > 1:
        for idx, arm in enumerate(arms):
            post[f'arms[{idx}]'] = arm
    return post


def export_events(*arms: str, post_format: str = 'json', return_format: str = 'json'):
    post = {
        'content': 'event',
        'format': post_format,
        'returnFormat': return_format
    }
    if len(arms) > 1:
        for idx, arm in enumerate(arms):
            post[f'arms[{idx}]'] = arm
    return post


def export_field_names(*fields: str, post_format: str = 'json', return_format: str = 'json'):
    """This method returns a list of the export/import-specific version of field names for all fields (or for one field,
    if desired) in a project. This is mostly used for checkbox fields because during data exports and data imports,
    checkbox fields have a different variable name used than the exact one defined for them in the Online Designer and
    Data Dictionary, in which *each checkbox option* gets represented as its own export field name in the following
    format: field_name + triple underscore + converted coded value for the choice. For non-checkbox fields, the export
    field name will be exactly the same as the original field name. Note: The following field types will be
    automatically removed from the list returned by this method since they cannot be utilized during the data import
    process: 'calc', 'file', and 'descriptive'.

    The list that is returned will contain the three following attributes for each field/choice: 'original_field_name',
    'choice_value', and 'export_field_name'. The choice_value attribute represents the raw coded value for a checkbox
    choice. For non-checkbox fields, the choice_value attribute will always be blank/empty. The export_field_name
    attribute represents the export/import-specific version of that field name."""
    post = {
        'content': 'exportFieldNames',
        'format': post_format,
        'returnFormat': return_format
    }
    if len(fields) > 1:
        for idx, field in enumerate(fields):
            post[f'fields[{idx}]'] = field
    return post


def export_file(record_id: str, field_name: str, event: enum.Enum, repeat_instance: str, return_format: str = 'json'):
    """This method allows you to download a document that has been attached to an individual record for a File Upload
    field. Please note that this method may also be used for Signature fields (i.e. File Upload fields with 'signature'
    validation type).

    Note about export rights: Please be aware that Data Export user rights will be applied to this API request. For
    example, if you have 'No Access' data export rights in the project, then the API file export will fail and return an
    error. And if you have 'De-Identified' or 'Remove all tagged Identifier fields' data export rights, then the API
    file export will fail and return an error *only if* the File Upload field has been tagged as an Identifier field. To
    make sure that your API request does not return an error, you should have 'Full Data Set' export rights in the
    project."""
    post = {
        'content': 'file',
        'action': 'export',
        'record': record_id,
        'field': field_name,
        'event': event,
        'repeat_instance': repeat_instance,
        'returnFormat': return_format
    }
    return post


def export_form_event_mapping(*arms: str, post_format: str = 'json', return_format: str = 'json'):
    post = {
        'content': 'formEventMapping',
        'format': post_format
    }
    if len(arms)> 1:
        for idx, arm in enumerate(arms):
            post[f'arms[{idx}]'] = arm
    return post


def export_logging(log_type: str = 'all', user: str = None, record_id: str = None, dag: str = None,
                   begin_time: datetime = None, end_time: datetime = None, return_format: str = 'json',
                   error_format: str = 'json'):
    """This method allows you to export the logging (audit trail) of all changes made to this project, including data
    exports, data changes, project metadata changes, modification of user rights, etc.

    :param log_type: You may choose event type to fetch result for specific event type. Options: 'all', 'data_export',
        'manage_design', 'user_role_cud', 'record_cud', 'record_create', 'record_updated', 'record_deleted',
        'record_locking_esignatures', 'page_views'. Default: 'all'. *Note: when returning 'all', it excludes page views.

    :param user: To return only the events belong to specific user (referring to existing username), provide a user. If
        not specified, it will assume all users.

    :param record_id: To return only the events belong to specific record (referring to existing record name), provide
        a record. If not specified, it will assume all records. This parameter is available only when event is related
        to record.

    :param dag: To return only the events belong to specific DAG (referring to group_id), provide a dag. If not
        specified, it will assume all dags.

    :param begin_time: To return only the events that have been logged *after* a given date/time, provide a timestamp in
        the format YYYY-MM-DD HH:MM (e.g., '2017-01-01 17:00' for January 1, 2017 at 5:00 PM server time). If not
        specified, it will assume no begin time. If only a date is passed, the time will default to
        12:00 AM server time.

    :param end_time: To return only records that have been logged *before* a given date/time, provide a date or a
        timestamp in the format YYYY-MM-DD HH:MM (e.g., '2017-01-01 17:00' for January 1, 2017 at 5:00 PM server time).
        If not specified, it will use the current server time. If only a date is passed, the time will default to
        11:59 PM server time.

    :param return_format: Specifies the format that data are returned. Options: 'csv', 'json', 'xml'. Default: 'json'.

    :param error_format: Specifies the format of error messages. If you do not pass in this flag, it will select the
        default format for you passed based on the 'return_format' flag you passed in. Options: 'csv', 'json', 'xml'.
        Default: 'json'.
    """

    log_types = ['all', 'data_export', 'manage_design', 'user_role_cud', 'record_cud', 'record_create',
                 'record_updated', 'record_deleted', 'record_locking_esignatures', 'page_views']

    if log_type not in log_types:
        ValueError(f"Export Logging: Invalid log type f{log_type}")

    # todo: check for user in list of users
    # todo: check that record_id exists in project
    # todo: check dag

    post = {
        'content': 'log',
        'format': return_format,
        'logType': log_type,
        'returnFormat': error_format
    }
    return post


def export_records():
    """This method allows you to export a set of records for a project.

    :param records: 

    :param return_type: Specifies the method in which returned data is modeled. 'flat' option outputs one record per
    row. 'eav' option outputs one data point per row. *Note: For non-longitudinal studies, the fields will be record,
    field_name, value. For longitudinal studies, the fields will be record, field_name, redcap_event_name. Options:
    'flat', 'eav'. Default: 'flat'.

    :param return_format

    :param error_format
    """


def get_data(events: list = None, forms: list = None, fields: list = None, records: list = None):
    data = {
        'content': 'record'
    }

    # add events to api call
    if events is not None:
        for idx, item in enumerate(events):
            data[f'events[{idx}]'] = item.name

    # add forms to api call
    if forms is not None:
        for idx, item in enumerate(forms):
            data[f'forms[{idx}]'] = item.name

    # add fields to api call
    if fields is not None:
        for idx, item in enumerate(fields):
            data[f'fields[{idx}]'] = item

    # add records to api call
    if records is not None:
        for idx, item in enumerate(records):
            data[f'records[{idx}]'] = str(item)

    # data['token'] = self._get_api_token()
    # data['format'] = self._get_api_format()
    # data['returnFormat'] = self._get_api_return_format()

    # make request
    # request = requests.post(self._get_api_url(), data=data)

    # check response code, throw error if necessary
    # self._parse_api_response(request)

    # return dict
    # return request.json()


@PostAPI
def get_project_events():
    # get all events
    post = {
        'content': 'event',
    }
    return post


def get_event_data(*event: enum.Enum, record: list):
    # get data from all records for each event
    post = {
        'content': 'record'
    }
    
    for idx, param in enumerate(record):
        post[f'records[{idx}]'] = param

    for idx, param in enumerate(event):
        post[f'events[{idx}]'] = param.name
    return post



class Events(enum.Enum):
    """enum class for easy idenfitication of available events in the REDCap project"""
    prescreening_arm_1 = 1
    screening_arm_1 = 2
    cognitive_testing_arm_1 = 3
    mri_structural_vis_arm_1 = 4
    ogttmri_visit_arm_1 = 5
    dexa_data_arm_1 = 6
    concomitant_medica_arm_1 = 7
    deviations_arm_1 = 8
    adverse_events_arm_1 = 9
    note_to_file_arm_1 = 10
    visit_note_arm_1 = 11
    subject_off_study_arm_1 = 12
    rescreening_arm_1 = 13
    recognitive_testin_arm_1 = 14
    remri_structural_v_arm_1 = 15
    reogttmri_visit_arm_1 = 16
    redexa_data_arm_1 = 17


class Forms(enum.Enum):
    """enum class for easy idenfitication of available forms in the REDCap project"""
    insulin_resistance_in_adolescents_survey = 1
    office_use = 2
    eassent = 3
    econsent = 4
    saved_consents = 5
    demographics_survey = 6
    medical_history_survey = 7
    mri_survey = 8
    tanner_survey = 9
    par_survey = 10
    yogtt002_screening_visit_checklist = 11
    yogtt003_informed_consenthippa_authorization_docum = 12
    yogtt004_demographics = 13
    yogtt005_medical_history = 14
    yogtt006_mri_safety_questionnaire = 15
    yogtt007_3_day_physical_activity_recall = 16
    yogtt008_tanner_questionnaire = 17
    yogtt009_screening_visit_data_collection_form = 18
    yogtt010_eligibility_criteria_form = 19
    yogtt011_cognitive_study_visit_protocol_checklist = 20
    yogtt012_mri_structural_visit_checklist = 21
    yogtt013_ogtt_mri_study_visit_protocol_checklist = 22
    yogtt015_concomitant_medication_tracking_log = 23
    yogtt016_deviation_tracking_log = 24
    yogtt017_adverse_event_tracking_log = 25
    yogtt018_note_to_file = 26
    yogtt019_visit_note = 27
    yogtt020_subject_off_study = 28
    dexa_data = 29
    insulin_data = 30
    cognitive_scores = 31
    internal_audit_review_form = 32


class Fields:

    def __init__(self):
        pass

    def cbc(self):
        fields = [
            'date_scr_data',
            'yn_eligible',
            'age_scr_data',
            'sex_scr_data',
            'wcc_scr_data',
            'rcc_scr_data',
            'hb_scr_data',
            'htc_scr_data',
            'mcv_scr_data',
            'mchc_scr_data',
            'rdwcv_scr_data',
            'rdwsd_scr_data',
            'platelet_scr_data',
            'absneutro_scr_data',
            'absimmgran_scr_data',
            'abslymph_scr_data',
            'absmono_scr_data',
            'abseosin_scr_data',
            'absbaso_scr_data',
            'nucrbc_scr_data',
            'relneutro_scr_data',
            'relimmgran_scr_data',
            'rellymph_scr_data',
            'relmono_scr_data',
            'releosin_scr_data',
            'relbaso_scr_data',
        ]
        return fields

    def demographics(self):
        fields = [
            'date_scr_data',
            'yn_eligible',
            'subj_id_eligible',
            'age_scr_data',
            'birth_date_demo',
            'sex_scr_data',
            'ethnicity2_demo',
            'race2_demo',
            'height_scr_data',
            'weight_scr_data',
            'waist_scr_data',
            'hip_scr_data',
            'male_genitalia1_tanner',
            'male_genitalia2_tanner',
            'female_gentalia1_tanner',
            'female_gentalia2_tanner',
            'hr4_scr_data',
            'sbp4_scr_data',
            'dbp4_scr_data',
            'map4_scr_data',
            'spo24_scr_data',
            'glucose3_scr_data',
            'insulin_scr_data',
            'hba1c3_scr_data',
            'hb_scr_data',
            'cholesterol3_scr_data',
            'hdl3_scr_data',
            'ldl3_scr_data',
            'trigs3_scr_data'
        ]
        return fields

    def dexa(self):
        fields = [
            'date_dexa',
            'yn_eligible',
            'age_scr_data',
            'sex_scr_data',
            'trunk1_dexa',
            'trunk2_dexa',
            'trunk3_dexa',
            'trunk4_dexa',
            'trunk5_dexa',
            'android1_dexa',
            'android2_dexa',
            'android3_dexa',
            'android4_dexa',
            'android5_dexa',
            'gynoid1_dexa',
            'gynoid2_dexa',
            'gynoid3_dexa',
            'gynoid4_dexa',
            'gynoid5_dexa',
            'total1_dexa',
            'total2_dexa',
            'total3_dexa',
            'total4_dexa',
            'total5_dexa',
            'vat_vol_dexa',
            'vat_mass_dexa',
        ]
        return fields

    def med_hx(self):
        fields = [
            'head_yn_hx',
            'head_specify_hx',
            'head_date_hx',
            'head_current_hx',
            'head_rx_hx',
            'neck_yn_hx',
            'neck_specify_hx',
            'neck_date_hx',
            'neck_current_hx',
            'neck_rx_hx',
            'asthma_yn_hx',
            'asthma_date_hx',
            'asthma_current_hx',
            'asthma_rx_hx',
            'asthma_ex_yn_hx',
            'asthma_ex_date_hx',
            'asthma_ex_current_hx',
            'asthma_ex_rx_hx',
            'osa_yn_hx',
            'osa_date_hx',
            'osa_current_hx',
            'osa_rx_hx',
            'lung_yn_hx',
            'lung_specify_hx',
            'lung_date_hx',
            'lung_current_hx',
            'lung_rx_hx',
            'resp_other_yn_hx',
            'resp_other_specify_hx',
            'resp_other_date_hx',
            'resp_other_current_hx',
            'resp_other_rx_hx',
            'cad_yn_hx',
            'cad_date_hx',
            'cad_current_hx',
            'cad_rx_hx',
            'pad_yn_hx',
            'pad_date_hx',
            'pad_current_hx',
            'pad_rx_hx',
            'mi_yn_hx',
            'mi_date_hx',
            'mi_current_hx',
            'mi_rx_hx',
            'valve_yn_hx',
            'valve_date_hx',
            'valve_current_hx',
            'valve_rx_hx',
            'chf_yn_hx',
            'chf_date_hx',
            'chf_current_hx',
            'chf_rx_hx',
            'heart_surg_yn_hx',
            'heart_surg_specify_hx',
            'heart_surg_date_hx',
            'heart_surg_current_hx',
            'heart_surg_rx_hx',
            'stroke_yn_hx',
            'stroke_date_hx',
            'stroke_current_hx',
            'stroke_rx_hx',
            'htn_yn_hx',
            'htn_date_hx',
            'htn_current_hx',
            'htn_rx_hx',
            'choles_yn_hx',
            'choles_date_hx',
            'choles_current_hx',
            'choles_rx_hx',
            'cv_other_yn_hx',
            'cv_other_specify_hx',
            'cv_other_date_hx',
            'cv_other_current_hx',
            'cv_other_rx_hx',
            'gi_yn_hx',
            'gi_specify_hx',
            'gi_date_hx',
            'gi_current_hx',
            'gi_rx_hx',
            'liver_yn_hx',
            'liver_specify_hx',
            'liver_date_hx',
            'liver_current_hx',
            'liver_rx_hx',
            'hepatic_other_yn_hx',
            'hepatic_other_specify_hx',
            'hepatic_other_date_hx',
            'hepatic_other_current_hx',
            'hepatic_other_rx_hx',
            'musculo_yn_hx',
            'musculo_specify_hx',
            'musculo_date_hx',
            'musculo_current_hx',
            'musculo_rx_hx',
            'clot_yn_hx',
            'clot_specify_hx',
            'clot_date_hx',
            'clot_current_hx',
            'clot_rx_hx',
            'blood_yn_hx',
            'blood_specify_hx',
            'blood_date_hx',
            'blood_current_hx',
            'blood_rx_hx',
            'coag_yn_hx',
            'coag_specify_hx',
            'coag_date_hx',
            'coag_current_hx',
            'coag_rx_hx',
            'hemo_other_yn_hx',
            'hemo_other_specify_hx',
            'hemo_other_date_hx',
            'hemo_other_current_hx',
            'hemo_other_rx_hx',
            'glycemia_yn_hx',
            'glycemia_specify_hx',
            'glycemia_date_hx',
            'glycemia_current_hx',
            'glycemia_rx_hx',
            'diabetes_yn_hx',
            'diabetes_specify_hx',
            'diabetes_date_hx',
            'diabetes_current_hx',
            'diabetes_rx_hx',
            'endo_other_yn_hx',
            'endo_other_specify_hx',
            'endo_other_date_hx',
            'endo_other_current_hx',
            'endo_other_rx_hx',
            'kidney_yn_hx',
            'kidney_specify_hx',
            'kidney_date_hx',
            'kidney_current_hx',
            'kidney_rx_hx',
            'renal_other_yn_hx',
            'renal_other_specify_hx',
            'renal_other_date_hx',
            'renal_other_current_hx',
            'renal_other_rx_hx',
            'pcos_yn_hx',
            'pcos_date_hx',
            'pcos_current_hx',
            'pcos_rx_hx',
            'repro_other_yn_hx',
            'repro_other_specify_hx',
            'repro_other_date_hx',
            'repro_other_current_hx',
            'repro_other_rx_hx',
            'chest_yn_hx',
            'chest_specify_hx',
            'chest_date_hx',
            'chest_current_hx',
            'chest_rx_hx',
            'abdo_yn_hx',
            'abdo_specify_hx',
            'abdo_date_hx',
            'abdo_current_hx',
            'abdo_rx_hx',
            'neuro_yn_hx',
            'neuro_specify_hx',
            'neuro_date_hx',
            'neuro_current_hx',
            'neuro_rx_hx',
            'neuro_other_yn_hx',
            'neuro_other_specify_hx',
            'neuro_other_date_hx',
            'neuro_other_current_hx',
            'neuro_other_rx_hx',
            'autism_yn_hx',
            'autism_date_hx',
            'autism_current_hx',
            'autism_rx_hx',
            'intellect_yn_hx',
            'intellect_date_hx',
            'intellect_current_hx',
            'intellect_rx_hx',
            'add_yn_hx',
            'add_date_hx',
            'add_current_hx',
            'add_rx_hx',
            'anxiety_yn_hx',
            'anxiety_date_hx',
            'anxiety_current_hx',
            'anxiety_rx_hx',
            'depress_yn_hx',
            'depress_date_hx',
            'depress_current_hx',
            'depress_rx_hx',
            'psych_other_yn_hx',
            'psych_other_specify_hx',
            'psych_other_date_hx',
            'psych_other_current_hx',
            'psych_other_rx_hx',
            'auto_yn_hx',
            'auto_specify_hx',
            'auto_date_hx',
            'auto_current_hx',
            'auto_rx_hx',
            'immune_other_yn_hx',
            'immune_other_specify_hx',
            'immune_other_date_hx',
            'immune_other_current_hx',
            'immune_other_rx_hx',
            'allergies_yn_hx',
            'allergies_specify_hx',
            'allergies_date_hx',
            'allergies_current_hx',
            'allergies_rx_hx',
            'wound_yn_hx',
            'wound_specify_hx',
            'wound_date_hx',
            'wound_current_hx',
            'wound_rx_hx',
            'other_yn_hx',
            'other_specify_hx',
            'other_date_hx',
            'other_current_hx',
            'other_rx_hx',
            'nicotine_use_hx',
            'nicotine_quit_hx',
            'nicotine_years_hx',
            'nicotine_use_yr_hx',
            'nicotine_use_month_hx',
            'heart_surgery_mri_form',
            'head_brain_surgery_mri_form',
            'eye_surgery_mri_form',
            'ear_surgery_mri_form',
            'back_surgery_mri_form',
            'endo_mri_form',
            'other_surgery_mri_form',
            'other_surgery_specify_mri_form',
            'metal1_mri_form',
            'metal2_mri_form',
            'metal3_mri_form',
            'metal4_mri_form',
            'implant1_mri_form',
            'implant2_mri_form',
            'implant3_mri_form',
            'implant4_mri_form',
            'implant5_mri_form',
            'implant6_mri_form',
            'implant7_mri_form',
            'implant8_mri_form',
            'implant9_mri_form',
            'implant10_mri_form',
            'implant11_mri_form',
            'other_implant_mri_form',
            'implant_specify_mri_form',
            'metal_eye_mri_form',
            'movement_disorder_mri_form',
            'allergies_mri_form',
            'asthma_mri_form',
            'pain_rx_mri_form',
            'claustrophobia_mri_form',
            'apnea_mri_form',
            'cmtrt',
            'cmindc',
            'cmdose',
            'cmdosu',
            'cmdosuoth',
            'cmdosfrq',
            'cmdosfrqoth',
            'cmstdtc',
            'cmendtc',
            'cmstrf',
            'cmenrf',
        ]
        return fields

    def par(self):
        fields = [
            'day1_par',
            'day1_time1_activity_par',
            'day1_time1_intensity_par',
            'day1_time2_activity_par',
            'day1_time2_intensity_par',
            'day1_time3_activity_par',
            'day1_time3_intensity_par',
            'day1_time4_activity_par',
            'day1_time4_intensity_par',
            'day1_time5_activity_par',
            'day1_time5_intensity_par',
            'day1_time6_activity_par',
            'day1_time6_intensity_par',
            'day1_time7_activity_par',
            'day1_time7_intensity_par',
            'day1_time8_activity_par',
            'day1_time8_intensity_par',
            'day1_time9_activity_par',
            'day1_time9_intensity_par',
            'day1_time10_activity_par',
            'day1_time10_intensity_par',
            'day1_time11_activity_par',
            'day1_time11_intensity_par',
            'day1_time12_activity_par',
            'day1_time12_intensity_par',
            'day1_time13_activity_par',
            'day1_time13_intensity_par',
            'day1_time14_activity_par',
            'day1_time14_intensity_par',
            'day1_time15_activity_par',
            'day1_time15_intensity_par',
            'day1_time16_activity_par',
            'day1_time16_intensity_par',
            'day1_time17_activity_par',
            'day1_time17_intensity_par',
            'day1_time18_activity_par',
            'day1_time18_intensity_par',
            'day1_time19_activity_par',
            'day1_time19_intensity_par',
            'day1_time20_activity_par',
            'day1_time20_intensity_par',
            'day1_time21_activity_par',
            'day1_time21_intensity_par',
            'day1_time22_activity_par',
            'day1_time22_intensity_par',
            'day1_time23_activity_par',
            'day1_time23_intensity_par',
            'day1_time24_activity_par',
            'day1_time24_intensity_par',
            'day1_time25_activity_par',
            'day1_time25_intensity_par',
            'day1_time26_activity_par',
            'day1_time26_intensity_par',
            'day1_time27_activity_par',
            'day1_time27_intensity_par',
            'day1_time28_activity_par',
            'day1_time28_intensity_par',
            'day1_time29_activity_par',
            'day1_time29_intensity_par',
            'day1_time30_activity_par',
            'day1_time30_intensity_par',
            'day1_time31_activity_par',
            'day1_time31_intensity_par',
            'day1_time32_activity_par',
            'day1_time32_intensity_par',
            'day1_time33_activity_par',
            'day1_time33_intensity_par',
            'day1_time34_activity_par',
            'day1_time34_intensity_par',
            'day2_par',
            'day2_time1_activity_par',
            'day2_time1_intensity_par',
            'day2_time2_activity_par',
            'day2_time2_intensity_par',
            'day2_time3_activity_par',
            'day2_time3_intensity_par',
            'day2_time4_activity_par',
            'day2_time4_intensity_par',
            'day2_time5_activity_par',
            'day2_time5_intensity_par',
            'day2_time6_activity_par',
            'day2_time6_intensity_par',
            'day2_time7_activity_par',
            'day2_time7_intensity_par',
            'day2_time8_activity_par',
            'day2_time8_intensity_par',
            'day2_time9_activity_par',
            'day2_time9_intensity_par',
            'day2_time10_activity_par',
            'day2_time10_intensity_par',
            'day2_time11_activity_par',
            'day2_time11_intensity_par',
            'day2_time12_activity_par',
            'day2_time12_intensity_par',
            'day2_time13_activity_par',
            'day2_time13_intensity_par',
            'day2_time14_activity_par',
            'day2_time14_intensity_par',
            'day2_time15_activity_par',
            'day2_time15_intensity_par',
            'day2_time16_activity_par',
            'day2_time16_intensity_par',
            'day2_time17_activity_par',
            'day2_time17_intensity_par',
            'day2_time18_activity_par',
            'day2_time18_intensity_par',
            'day2_time19_activity_par',
            'day2_time19_intensity_par',
            'day2_time20_activity_par',
            'day2_time20_intensity_par',
            'day2_time21_activity_par',
            'day2_time21_intensity_par',
            'day2_time22_activity_par',
            'day2_time22_intensity_par',
            'day2_time23_activity_par',
            'day2_time23_intensity_par',
            'day2_time24_activity_par',
            'day2_time24_intensity_par',
            'day2_time25_activity_par',
            'day2_time25_intensity_par',
            'day2_time26_activity_par',
            'day2_time26_intensity_par',
            'day2_time27_activity_par',
            'day2_time27_intensity_par',
            'day2_time28_activity_par',
            'day2_time28_intensity_par',
            'day2_time29_activity_par',
            'day2_time29_intensity_par',
            'day2_time30_activity_par',
            'day2_time30_intensity_par',
            'day2_time31_activity_par',
            'day2_time31_intensity_par',
            'day2_time32_activity_par',
            'day2_time32_intensity_par',
            'day2_time33_activity_par',
            'day2_time33_intensity_par',
            'day2_time34_activity_par',
            'day2_time34_intensity_par',
            'day3_par',
            'day3_time1_activity_par',
            'day3_time1_intensity_par',
            'day3_time2_activity_par',
            'day3_time2_intensity_par',
            'day3_time3_activity_par',
            'day3_time3_intensity_par',
            'day3_time4_activity_par',
            'day3_time4_intensity_par',
            'day3_time5_activity_par',
            'day3_time5_intensity_par',
            'day3_time6_activity_par',
            'day3_time6_intensity_par',
            'day3_time7_activity_par',
            'day3_time7_intensity_par',
            'day3_time8_activity_par',
            'day3_time8_intensity_par',
            'day3_time9_activity_par',
            'day3_time9_intensity_par',
            'day3_time10_activity_par',
            'day3_time10_intensity_par',
            'day3_time11_activity_par',
            'day3_time11_intensity_par',
            'day3_time12_activity_par',
            'day3_time12_intensity_par',
            'day3_time13_activity_par',
            'day3_time13_intensity_par',
            'day3_time14_activity_par',
            'day3_time14_intensity_par',
            'day3_time15_activity_par',
            'day3_time15_intensity_par',
            'day3_time16_activity_par',
            'day3_time16_intensity_par',
            'day3_time17_activity_par',
            'day3_time17_intensity_par',
            'day3_time18_activity_par',
            'day3_time18_intensity_par',
            'day3_time19_activity_par',
            'day3_time19_intensity_par',
            'day3_time20_activity_par',
            'day3_time20_intensity_par',
            'day3_time21_activity_par',
            'day3_time21_intensity_par',
            'day3_time22_activity_par',
            'day3_time22_intensity_par',
            'day3_time23_activity_par',
            'day3_time23_intensity_par',
            'day3_time24_activity_par',
            'day3_time24_intensity_par',
            'day3_time25_activity_par',
            'day3_time25_intensity_par',
            'day3_time26_activity_par',
            'day3_time26_intensity_par',
            'day3_time27_activity_par',
            'day3_time27_intensity_par',
            'day3_time28_activity_par',
            'day3_time28_intensity_par',
            'day3_time29_activity_par',
            'day3_time29_intensity_par',
            'day3_time30_activity_par',
            'day3_time30_intensity_par',
            'day3_time31_activity_par',
            'day3_time31_intensity_par',
            'day3_time32_activity_par',
            'day3_time32_intensity_par',
            'day3_time33_activity_par',
            'day3_time33_intensity_par',
            'day3_time34_activity_par',
            'day3_time34_intensity_par',
        ]
        return fields

    def vo2(self):
        fields = [
            'vo2_scr',
            'vo2_plateau_scr',
            'vo2_hr_scr',
            'vo2_rer_scr',
            'vo2_abs_scr_data',
            'vo2_rel_scr_data',
            'vo2_plateau_scr_data',
            'vo2_hr_scr_data',
            'vo2_rer_scr_data'
        ]
        return fields


class FieldsIrb0361(Fields):

    def __init__(self):
        super().__init__()

    def counts(self):
        fields = [
            #include fields for bloods
            'fgre_mri',
            'cal_mri',
            't1_mri',
            'asl_mri',
            'vipr_mri',
            'flair_mri',
            'swan_mri',
            'dwi_mri',
            'aps_hydi_mri',
            'mps_hydi_mri',
            'cubet2_mri',
            'madni_ogtt',
            'asl1_ogtt',
            'vipr1_ogtt',
            'asl2_ogtt',
            'vipr2_ogtt',
            'asl3_ogtt',
            'vipr3_ogtt',
            'asl4_ogtt',
            'vipr4_ogtt',
            'asl5_ogtt',
            'vipr5_ogtt'
        ]
        return fields

    def ogtt_duration(self):
        fields = [
            'ogtt_completed_ogtt',
            'ogtt_duration_ogtt'
        ]
        return fields

    def ogtt_vitals(self):
        fields = [
            'hr1_ogtt',
            'hr2_ogtt',
            'hr3_ogtt',
            'hr4_ogtt',
            'hr5_ogtt',
            'hr6_ogtt',
            'hr7_ogtt',
            'hr8_ogtt',
            'hr9_ogtt',
            'hr10_ogtt',
            'sbp1_ogtt',
            'sbp2_ogtt',
            'sbp3_ogtt',
            'sbp4_ogtt',
            'sbp5_ogtt',
            'sbp6_ogtt',
            'sbp7_ogtt',
            'sbp8_ogtt',
            'sbp9_ogtt',
            'sbp10_ogtt',
            'dbp1_ogtt',
            'dbp2_ogtt',
            'dbp3_ogtt',
            'dbp4_ogtt',
            'dbp5_ogtt',
            'dbp6_ogtt',
            'dbp7_ogtt',
            'dbp8_ogtt',
            'dbp9_ogtt',
            'dbp10_ogtt',
            'map1_ogtt',
            'map2_ogtt',
            'map3_ogtt',
            'map4_ogtt',
            'map5_ogtt',
            'map6_ogtt',
            'map7_ogtt',
            'map8_ogtt',
            'map9_ogtt',
            'map10_ogtt',
            'co21_ogtt',
            'co22_ogtt',
            'co23_ogtt',
            'co24_ogtt',
            'co25_ogtt',
            'co26_ogtt',
            'co27_ogtt',
            'co28_ogtt',
            'co29_ogtt',
            'co210_ogtt',
            'resp1_ogtt',
            'resp2_ogtt',
            'resp3_ogtt',
            'resp4_ogtt',
            'resp5_ogtt',
            'resp6_ogtt',
            'resp7_ogtt',
            'resp8_ogtt',
            'resp9_ogtt',
            'resp10_ogtt',
            'spo21_ogtt',
            'spo22_ogtt',
            'spo23_ogtt',
            'spo24_ogtt',
            'spo25_ogtt',
            'spo26_ogtt',
            'spo27_ogtt',
            'spo28_ogtt',
            'spo29_ogtt',
            'spo210_ogtt',
        ]
        return fields

    def times(self):
        # fields = [
        pass